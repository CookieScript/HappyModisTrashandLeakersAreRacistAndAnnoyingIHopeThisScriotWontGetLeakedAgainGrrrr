Script_Key="OnshuVFTJanaiUgF";
getgenv().ChatLoad = false



for Key, Object in pairs(getgc(true)) do
    if type(Object) == "table" then
        setreadonly(Object, false)
        local indexInstance = rawget(Object, "indexInstance")
        if type(indexInstance) == "table" and indexInstance[1] == "kick" then
            setreadonly(indexInstance, false)
            rawset(Object, "Table", {"kick", function() coroutine.yield() end})
            break
        end
    end
end
--
assert(getrawmetatable)
grm = getrawmetatable(game)
setreadonly(grm, false)
old = grm.__namecall

grm.__namecall = newcclosure(function(self, ...)
    local args = {...}  

    local methodName = tostring(args[1])

    local blockedMethods = {"TeleportDetect", "CHECKER_1", "CHECKER", "GUI_CHECK", "OneMoreTime", "checkingSPEED", "BANREMOTE", "PERMAIDBAN", "KICKREMOTE", "BR_KICKPC", "BR_KICKMOBILE"}

    if table.find(blockedMethods, methodName) then return end

    return old(self, ...)
end)

game.StarterGui:SetCore("SendNotification", {
Title = "Sigmaboy",
Text = "Bypassed by Virtual" })




-- Locals / Variable
local player = game.Players.LocalPlayer
local playerCharacter = player.Character or player.CharacterAdded:Wait()
local playerHumanoidRootPart = playerCharacter:FindFirstChild("HumanoidRootPart") or playerCharacter:WaitForChild("HumanoidRootPart")
local playerBackPack = player:FindFirstChild("Backpack") or player:WaitForChild("Backpack")

-- Services
local RunService = Game:GetService("RunService")



if (Script_Key) ~= "OnshuVFTJanaiUgF" then
    player:Kick("Wrong Key")
end

local function PlayThatBitch()
        local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
 
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "IntroScreen"
        screenGui.Parent = playerGui
 
        local frame = Instance.new("Frame")
        frame.Name = "IntroFrame"
        frame.Parent = screenGui
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundTransparency = 1
 
        local imageLabel = Instance.new("ImageLabel")
        imageLabel.Name = "IntroImage"
        imageLabel.Parent = frame
        imageLabel.Size = UDim2.new(0.01, 0, 0.01, 0)  
        imageLabel.Position = UDim2.new(0.5, -0.1, 0.5, -0.1) 
        imageLabel.Image = "rbxassetid://113276332333710"
        imageLabel.BackgroundTransparency = 1
        imageLabel.ImageTransparency = 100
        imageLabel.AnchorPoint = Vector2.new(0.5, 0.5)
 
        local sound = Instance.new("Sound")
        sound.Name = "IntroSound"
        sound.Parent = frame
        sound.SoundId = "rbxassetid://7556198569"
        sound.Volume = 50
        sound:Play()
 
        local tweenService = game:GetService("TweenService")
 
        local blurEffect = Instance.new("BlurEffect")
        blurEffect.Parent = game.Lighting
        blurEffect.Size = 60
 
        local zoomTweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)  
        local blurTweenInfo = TweenInfo.new(4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)  
 
        local fadeIn = tweenService:Create(imageLabel, zoomTweenInfo, {ImageTransparency = 0.5})
        local fadeOut = tweenService:Create(imageLabel, zoomTweenInfo, {ImageTransparency = 1})
        local blurTween = tweenService:Create(blurEffect, blurTweenInfo, {Size = 0})  
        local zoomTween = tweenService:Create(imageLabel, zoomTweenInfo, {Size = UDim2.new(0.35, 0, 0.35, 0)})
 
        fadeIn:Play()
        fadeIn.Completed:Wait()
 
        zoomTween:Play()
        blurTween:Play()
 
        wait(3)  
 
        fadeOut:Play()
        fadeOut.Completed:Wait()
 
        blurTween:Play()
        blurTween.Completed:Wait()
 
        blurEffect:Destroy()
        screenGui:Destroy()
    end
 
    PlayThatBitch()
task.wait(0.5)

--[[

local function Arguments()
    if game.PlaceId == 2788229376 or 16033173781 then return end

    local placeIds = {
        [5602055394] = "MousePos",
        [7951883376] = "MousePos",
        [17403265390] = "MOUSE",
        [14412601883] = "MOUSE",
        [18111448661] = "MOUSE",
        [14487637618] = "MOUSE",
        [14413712255] = "MOUSE",
        [15186202290] = "MOUSE",
        [18111451594] = "MOUSE",
        [17836920497] = "Mouse",
    }
    return placeIds[game.PlaceId] or "UpdateMousePos"
end

task.spawn(function()
    if game.PlaceId ~= 2788229376 or 16033173781 then
        for _, Remote in pairs(ReplicatedStorage:GetDescendants()) do
            if Remote.Name == "MainEvent" then
                Script.MainEvent = Remote
                break
            end
        end
    end
end)

Script.Argument = Arguments()

--]]




local Gunsettings = {
    Gunpos = {
        Enabled = true,
        Pos = {
            X = 0,
            Y = 0,
            Z = 0,
        },
    },
}

--[[

local function MoveGunFunction(Character)
    local Connection = nil
    local Tool = nil
    local OldPos = nil

    Character.ChildAdded:Connect(function(Child)
        if Gunsettings.Gunpos.Enabled and Child:IsA("Tool") then
            Tool = Child
            OldPos = Tool.GripPos

            Connection = game:GetService("RunService").Heartbeat:Connect(function()
                if Tool and Tool.Parent then
                    if Gunsettings.Gunpos.Enabled then
                        local NewGripPos = Vector3.new(Gunsettings.Gunpos.Pos.X, Gunsettings.Gunpos.Pos.Y, Gunsettings.Gunpos.Pos.Z)
                        Tool.GripPos = NewGripPos
                        RefreshGripPos(Tool)
                    else
                        Tool.GripPos = OldPos
                        RefreshGripPos(Tool)
                    end
                end
            end)
        end
    end)

    Character.ChildRemoved:Connect(function(Child)
        if Child:IsA("Tool") then
            Tool = nil
            if Connection then
                Connection:Disconnect()
                Connection = nil
            end
        end
    end)
end

pcall(function()
    MoveGunFunction(playerCharacter)
end)

player.CharacterAdded:Connect(function(character)
    MoveGunFunction(character)
end)

--]]

local function MoveGunFunction(Character)
    local Connection = nil
    local Tool = nil
    local OldPos = nil

    Character.ChildAdded:Connect(function(Child)
        if Gunsettings.Gunpos.Enabled and Child:IsA("Tool") then
            Tool = Child
            OldPos = Tool.GripPos

            Connection = game:GetService("RunService").Heartbeat:Connect(function()
                if Tool and Tool.Parent then
                    if Gunsettings.Gunpos.Enabled then
                        local NewGripPos = Vector3.new(Gunsettings.Gunpos.Pos.X, Gunsettings.Gunpos.Pos.Y, Gunsettings.Gunpos.Pos.Z)
                        Tool.GripPos = NewGripPos
                    else
                        Tool.GripPos = OldPos
                    end
                    task.wait()
                    RefreshGripPos(Tool)
                end
            end)
        end
    end)

    Character.ChildRemoved:Connect(function(Child)
        if Child:IsA("Tool") then
            Tool = nil
            if Connection then
                Connection:Disconnect()
                Connection = nil
            end
        end
    end)
end

pcall(function()
    MoveGunFunction(playerCharacter)
end)

player.CharacterAdded:Connect(function(character)
    MoveGunFunction(character)
end)




local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/LuarmorIsGay5/automatic-spork/refs/heads/main/Library.txt",true))()

Library:ChangeAccent(Color3.fromRGB(143, 48, 167))



local Color = "Normal"

local function ui()
    if Color == "Normal" then
        Library:ChangeAccent(Color3.fromRGB(143, 48, 167))
    elseif Color == "Old Psalm" then
        Library:ChangeAccent(Color3.fromRGB(86, 116, 148))
    elseif Color == "Psalm" then
        Library:ChangeAccent(Color3.fromRGB(0, 150, 210))
    elseif Color == "Pink" then
        Library:ChangeAccent(Color3.fromRGB(255, 148, 255))
    elseif Color == "Christmas" then
        Library:ChangeAccent(Color3.fromRGB(250, 0, 30))
    elseif Color == "Tank" then
        Library:ChangeAccent(Color3.fromRGB(91, 102, 59))
    end
end



--[[

purple : 105, 18, 180

psalm : color 86, 116, 148

pink : 255, 148, 255

white : 255, 255, 255

red : 255, 0, 0





]]

if getgenv().ChatLoad then
    local args = {
        [1] = "Virtual on top",
        [2] = "All"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest"):FireServer(unpack(args))
end


local Window = Library:Window({Name = string.format("Virtual.lol | v0.0.1 | Beta"), Amount = 5})

local Watermark = Library:Watermark({Name = string.format("Virtual.lol | v0.0.1 | Beta | Paid")})


local Indicator = Library:Indicator({Name = "New Indicator"})
-- Indicator Options
local TextIndicator = Indicator:NewValue({Name = "New Text", Value = "value here"})
local BarIndicator = Indicator:NewBar({Name = "New Bar", Value = 10, Min = 0, Max = 100})
--
local Tab = Window:Page({Name = "Combat", Weapons = true})
local Tab1 = Window:Page({Name = "Rage", Weapons = true})
local Tab2 = Window:Page({Name = "Miscellaneous", Weapons = true})
local Playerlist = Window:Page({Name = "Playerlist", Weapons = true})
local Settings = Window:Page({Name = "Settings"})
--
local Page = Tab:Weapon({Icon = "rbxassetid://88836741434398"})
local Page1 = Tab:Weapon({Icon = "rbxassetid://106397886212631"})

local Page2 = Tab:Weapon({Icon = "rbxassetid://113531571097970"})
local Page3 = Tab:Weapon({Icon = "rbxassetid://138737595020251"})

-- Tab1

local Page4 = Tab1:Weapon({Icon = "rbxassetid://6034509987"})

-- Tab2

local Page5 = Tab2:Weapon({Icon = "rbxassetid://6026568213"})

-- Playerlist

local Page6 = Playerlist:Weapon({Icon = "rbxassetid://7300480952"})



--[[ http://www.roblox.com/asset/?id=17677463033

Ak47 : rbxassetid://88836741434398

REV : rbxassetid://106397886212631

SG : 118698023926650

Snipah : 104037274406938

138737595020251

113531571097970

minigun : 10468797656

Rpg : 17167744841

Tommy : 16057579514

Kinfe : 15132318284

Tacticalkinfe : 15571461800

Karambit : 12978115973

Target : 6034509987

]]


-- Sections
local Section = Page:Section({Name = "Target Aim", Side = "Left"})
local Section1 = Page:Section({Name = "Calculation", Side = "Right"})
local Section2 = Page:Section({Name = "Bullet tp", Side = "Left"})
local SectionI = Page:Section({Name = "HitPart", Side = "Left"})
local Section3 = Page:Section({Name = "Resolver Method", Side = "Right"})
local Section4 = Page1:Section({Name = "Aimbot camera", Side = "Left"})
local Section5 = Page3:Section({Name = "Gun", Side = "Left"})
local Section6 = Page3:Section({Name = "Gun Settings", Side = "Right"})
local Section7 = Settings:Section({Name = "Ui settings", Side = "Left"})
local Section8 = Settings:Section({Name = "Hood Custom", Side = "Right"})
local Section9 = Page4:Section({Name = "?", Side = "Left"})
local Section10 = Page5:Section({Name = "Cframe", Side = "Left"})
local Section11 = Page5:Section({Name = "Macro", Side = "Left"})
local Section12 = Page5:Section({Name = "Auto", Side = "Right"})
local Section13 = Page5:Section({Name = "Anti Aim", Side = "Right"})


Section:Toggle({
    Name = "Target aim",
    Callback = function(a)

    end
})

Section:Toggle({
    Name = "Look at",
    Callback = function(a)

    end
})

Section:Toggle({
    Name = "View",
    Callback = function(a)

    end
})

Section:Button({
    Name = "Load Button",
    Callback = function()

    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "Gui"
    ScreenGui.Parent = game.CoreGui

    local But = Instance.new("ImageButton")
    But.Size = UDim2.new(0, 100, 0, 100)
    But.Position = UDim2.new(0.3, 0, 0.2, 0)
    But.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    But.ImageColor3 = Color3.fromRGB(255, 255, 255)
    But.Image = "rbxassetid://113276332333710"
    But.ImageTransparency = 0
    -- But.ScaleType = Enum.ScaleType.Slice
    But.Parent = ScreenGui
    But.Draggable = true
    But.BackgroundTransparency = 1



    end
})

Section1:Textbox({
    Name = "X Prediction",
    Default = "0",
    Callback = function(a)
        
    end
})

Section1:Textbox({
    Name = "Y Prediction",
    Default = "0",
    Callback = function(a)
        
    end
})

Section1:Textbox({
    Name = "JumpOffset",
    Default = "0",
    Callback = function(a)
        
    end
})

Section1:Toggle({
    Name = "Auto Prediction",
    Callback = function(a)

    end
})

Section1:List({
    Name = "Auto Prediction Type",
    Options = {
        "Calculation", "Ping Based", "Blatant", "AdvanceCalculation"
    },
    Default = "Calculation",
    Callback = function(a)
        
    end
})

Section1:Divider({Name = "Checks"})

Section1:Toggle({
    Name = "Enabled",
    Callback = function(a)

    end
})

Section1:Toggle({
    Name = "KO check",
    Callback = function(a)

    end
})

Section1:Toggle({
    Name = "Anti groundshot",
    Callback = function(a)

    end
})

Section2:Toggle({
    Name = "Enabled",
    Callback = function(a)

    end
})

SectionI:Toggle({
    Name = "NearestPart",
    Callback = function(a)

    end
})

SectionI:List({
    Name = "BodyPart",
    Options = {
        "Head", "HumanoidRootPart", "UpperTorso", "LowerTorso", 
        "LeftUpperArm", "LeftLowerArm", "LeftHand", 
        "RightUpperArm", "RightLowerArm", "RightHand", 
        "LeftUpperLeg", "LeftLowerLeg", "LeftFoot", 
        "RightUpperLeg", "RightLowerLeg", "RightFoot"
    },
    Default = "HumanoidRootPart",
    Callback = function(a)
        
    end
})

Section3:Toggle({
    Name = "Enabled",
    Callback = function(a)

    end
})

Section3:List({
    Name = "Resolver Type",
    Options = {
        "MoveDirection", "Diddy"
    },
    Default = "HumanoidRootPart",
    Callback = function(a)
        
    end
})

Section4:Toggle({
    Name = "Aimbot camera",
    Callback = function(a)

    end
})

Section4:Textbox({
    Name = "X Prediction",
    Default = "0",
    Callback = function(a)
        
    end
})

Section4:Textbox({
    Name = "Y Prediction",
    Default = "0",
    Callback = function(a)
        
    end
})

Section4:Textbox({
    Name = "JumpOffset",
    Default = "0",
    Callback = function(a)
        
    end
})

Section4:List({
    Name = "Hitpart",
    Options = {
        "Head", "HumanoidRootPart", "UpperTorso", "LowerTorso", 
        "LeftUpperArm", "LeftLowerArm", "LeftHand", 
        "RightUpperArm", "RightLowerArm", "RightHand", 
        "LeftUpperLeg", "LeftLowerLeg", "LeftFoot", 
        "RightUpperLeg", "RightLowerLeg", "RightFoot"
    },
    Default = "HumanoidRootPart",
    Callback = function(a)
        
    end
})

Section5:List({
    Name = "Gun Type",
    Options = {
        "db", "rev", "rifle", "shotgun",
        "ak-47", "lmg"
    },
    Default = "lmg",
    Callback = function(a)
        
    end
})

Section5:Button({
    Name = "Buy Gun",
    Callback = function()
        
    end
})

Section6:Toggle({
    Name = "Enabled",
    Callback = function(a)
        Gunsettings.Gunpos.Enabled = a
    end
})

Section6:Slider({
    Name = 'X Position',
    Default = 0,
    Min = -100,
    Max = 100,
    Callback = function(a)
        Gunsettings.Gunpos.Pos.X = a
    end
})

Section6:Slider({
    Name = 'Y Position',
    Default = 0,
    Min = -100,
    Max = 100,
    Callback = function(a)
        Gunsettings.Gunpos.Pos.Y = a
    end
})

Section6:Slider({
    Name = 'Z Position',
    Default = 0,
    Min = -100,
    Max = 100,
    Callback = function(a)
        Gunsettings.Gunpos.Pos.Z = a
    end
})

Section10:Toggle({
    Name = "Enabled",
    Callback = function(a)
        
    end
})


Section10:Slider({
    Name = 'Speed',
    Default = 1,
    Min = 0,
    Max = 10,
    Callback = function(a)
        
    end
})

Section10:Button({
    Name = "Load Cframe",
    Callback = function()
        
    end
})

Section11:Toggle({
    Name = "Enabled",
    Callback = function(a)
        
    end
})


Section11:Slider({
    Name = 'Delay',
    Default = 0.02,
    Min = 0,
    Max = 0.5,
    Callback = function(a)
        
    end
})

Section11:Button({
    Name = "Load Macro",
    Callback = function()
        
    end
})

Section12:Toggle({
    Name = "Enabled",
    Callback = function(a)
        
    end
})

Section12:Slider({
    Name = 'Delay',
    Default = 0.025,
    Min = 0,
    Max = 10,
    Callback = function(a)
        
    end
})

local antiaim = {
    Enabled = false,
    Type = "Customize",
    Position = {
        X = 0,
        Y = 0,
        Z = 0,
    },
    Random = {
        Minimize = 0,
        Max = 0,
    },
    Desync = {
        CFrameDesync = false,
        NetworkDesync = false,
    },
}



local toilet = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local rizz = LocalPlayer:GetMouse()

function RandomNumberRange(a)
    return math.random(-a * 100, a * 100) / 100
end

function RandomVectorRange(a, b, c)
    return Vector3.new(RandomNumberRange(a), RandomNumberRange(b), RandomNumberRange(c))
end

local DesyncTypes = {}

toilet.Heartbeat:Connect(function()
    if antiaim.Desync.CFrameDesync then
        DesyncTypes[1] = LocalPlayer.Character.HumanoidRootPart.CFrame
        DesyncTypes[2] = LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity

        local SpoofThis = LocalPlayer.Character.HumanoidRootPart.CFrame
        SpoofThis = SpoofThis * CFrame.Angles(math.rad(RandomNumberRange(0)), math.rad(RandomNumberRange(1)), math.rad(RandomNumberRange(0)))

        LocalPlayer.Character.HumanoidRootPart.CFrame = SpoofThis
        LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(1, 1, 1) * 9999999999999999999999999

        toilet.RenderStepped:Wait()

        LocalPlayer.Character.HumanoidRootPart.CFrame = DesyncTypes[1]
        LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity = DesyncTypes[2]
    end
end)


if antiaim.Desync.NetworkDesync then
    return
end


game:GetService("RunService").Heartbeat:Connect(function()
    if antiaim.Enabled then
        local vel = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
        if antiaim.Type == "Customize" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(antiaim.Position.X, antiaim.Position.Y, antiaim.Position.Z)
        elseif antiaim.Type == "Random" then
            local min, max = antiaim.Random.Minimize, antiaim.Random.Max
            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(
                math.random(min, max),
                math.random(min, max),
                math.random(min, max)
            )
        end
        game:GetService("RunService").RenderStepped:Wait()
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = vel
    end
end)

hookfunction(game.Players.LocalPlayer.IsInGroup, function() return true end)



Section13:Toggle({
    Name = "Enabled",
    Callback = function(a)
        antiaim.Enabled = a
    end
})

Section13:List({
    Name = "Anti Type",
    Options = {
        "Customize", "Random"
    },
    Default = "Customize",
    Callback = function(a)
        antiaim.Type = a
    end
})

Section13:Slider({
    Name = 'X Velocity',
    Default = 0,
    Min = 0,
    Max = 5000,
    Callback = function(a)
        antiaim.Position.X = a
    end
})

Section13:Slider({
    Name = 'Y Velocity',
    Default = 0,
    Min = 0,
    Max = 5000,
    Callback = function(a)
        antiaim.Position.Y = a
    end
})

Section13:Slider({
    Name = 'Z Velocity',
    Default = 0,
    Min = 0,
    Max = 5000,
    Callback = function(a)
        antiaim.Position.Z = a
    end
})

Section13:Slider({
    Name = 'Minimize',
    Default = 0,
    Min = 0,
    Max = 5000,
    Callback = function(a)
        antiaim.Random.Minimize = a
    end
})

Section13:Slider({
    Name = 'Max',
    Default = 0,
    Min = 0,
    Max = 5000,
    Callback = function(a)
        antiaim.Random.Max = a
    end
})

Section13:Toggle({
    Name = "CFrame Desync",
    Callback = function(a)
        antiaim.Desync.CFrameDesync = a
    end
})

Section13:Toggle({
    Name = "Network Desync",
    Callback = function(a)
        antiaim.Desync.NetworkDesync = a
    end
})


--
Section7:List({
    Name = "Ui Color",
    Options = {
        "Normal", "Old Psalm", "Psalm", "Pink", "Christmas",
        "Tank"
    },
    Default = "Normal",
    Callback = function(a)
        Color = a
    end
})

Section7:Button({
    Name = "Update",
    Callback = function()
        ui()
    end
})

--
do -- Settings
    local CFG = Settings:Section({Name = "Config", Zindex = 2})
    --
    local ConfigList = CFG:List({Name = "Config", Flag = "SettingConfigurationList", Options = {}})
    CFG:Textbox({Flag = "SettingsConfigurationName", Name = "Config Name"})
    --
    local CurrentList = {}
    local function UpdateConfigList()
        local List = {}
        for idx, file in ipairs(listfiles("Virtual/Configs")) do
            local FileName = file:gsub("Virtual/Configs\\", ""):gsub(".cfg", "")
            List[#List + 1] = FileName
        end

        local IsNew = #List ~= #CurrentList
        if not IsNew then
            for idx, file in ipairs(List) do
                if file ~= CurrentList[idx] then
                    IsNew = true
                    break
                end
            end
        end

        if IsNew then
            CurrentList = List
            ConfigList:Refresh(CurrentList)
        end
    end
    --
    CFG:Button(
        {
            Name = "Create",
            Callback = function()
                local Success, Error =
                    pcall(
                    function()
                        local ConfigName = Flags.SettingsConfigurationName
                        if ConfigName == "" or isfile("Virtual/Configs/" .. ConfigName .. ".cfg") then
                            return
                        end
                        writefile("Vritual/Configs/" .. ConfigName .. ".cfg", "")
                        UpdateConfigList()
                    end
                )
            end
        }
    ):Button(
        {
            Name = "Save",
            Callback = function()
                local Success, Error =
                    pcall(
                    function()
                        local SelectedConfig = Flags.SettingConfigurationList
                        if SelectedConfig then
                            writefile("Virtual/Configs/" .. SelectedConfig .. ".cfg", Library:GetConfig())
                        end
                    end
                )
            end
        }
    )
    CFG:Button(
        {
            Name = "Load",
            Callback = function()
                local Success, Error =
                    pcall(
                    function()
                        local SelectedConfig = Flags.SettingConfigurationList
                        if SelectedConfig then
                            Library:LoadConfig(readfile("Virtual/Configs/" .. SelectedConfig .. ".cfg"))
                        end
                    end
                )
            end
        }
    ):Button(
        {
            Name = "Delete",
            Callback = function()
                local SelectedConfig = Flags.SettingConfigurationList
                if SelectedConfig then
                    delfile("Virtual/Configs/" .. SelectedConfig .. ".cfg")
                end
                UpdateConfigList()
            end
        }
    )
    CFG:Button(
        {
            Name = "Refresh",
            Callback = function()
                UpdateConfigList()
            end
        }
    )
    --
    CFG:Keybind(
        {
            Name = "Menu Key",
            Flag = "MenuKey",
            UseKey = true,
            Default = Enum.KeyCode.End,
            Callback = function(State)
                Library.UIKey = State
            end
        }
    )
    CFG:Colorpicker(
        {
            Name = "Menu Accent",
            Flag = "MenuAccent",
            Default = Library.Accent,
            Callback = function(State)
                Library:ChangeAccent(State)
            end
        }
    )
    CFG:Toggle(
        {
            Name = "Show Watermark",
            Flag = "Watermark",
            Callback = function(State)
                Watermark:SetVisible(State)
            end
        }
    )
    CFG:Textbox(
    {
        Flag = "WatermarkText",
        Name = "Watermark Text",
        State = string.format("Virtual | v0.0.1 | Beta | Paid"),
        Callback = function(State)
            Watermark:UpdateText(State)
        end
    }
)



end


-- Its not Skidd
